#!/usr/bin/env python3
"""This script visualizes the wavefunctions of a given potential. It also shows
the expected values of the position and the corresponding uncertainties."""


import argparse
import numpy as np
from calculus.plot import pot_plot_one, pot_plot_multi
from calculus._file_io import _read_schrodinger, _read_files


_DESCRIPTION = """
Visualizes the solution of the schrodinger equation."""


def _clparsing():
    """Takes inputs from the command line and passes them to the program

    Returns:
        dic: Dictionary including the user input from the command line
    """
    parser = argparse.ArgumentParser(description=_DESCRIPTION)

    msg = 'Path of the input file'
    parser.add_argument('-sd', '--sinpdir', default='.', help=msg)

    msg = 'Path of the data files'
    parser.add_argument('-dd', '--dinpdir', default='.', help=msg)

    msg = 'Scaling factor for the wavefunctions as a float'
    parser.add_argument('-s', '--scale', type=float, default=None, help=msg)

    args = parser.parse_args()

    return args


def main():
    """Main function to show the plot of the potential, the eigenvalues, the
    wavefunctions and the expected values of the position of the particle. It
    reads out the data which were calculated by the solver.
    """
    args = _clparsing()
    sinpdir = args.sinpdir
    dinpdir = args.dinpdir
    scale = args.scale

    try:
        data = _read_files(dinpdir)
    except OSError as exc:
        print("Data could not be read.")
        print("Original error messege: {}".format(exc))
        quit()

    energy = data[0]
    xplot = data[2][:, 0]
    pot = data[2][:, 1:]
    evec = data[3][:, 1:]

    xmin = np.amin(xplot)
    xmax = np.amax(xplot)

    try:
        inp = _read_schrodinger(sinpdir, 'schrodinger.inp')
    except OSError as exc:
        print("File 'schrodinger.inp' could not be read.")
        print("Original error messege: {}".format(exc))
        quit()

    min_ev = inp['min_ev']
    max_ev = inp['max_ev']

    if min_ev < max_ev:
        expectedx = data[1][:, 0]
        uncertainty = data[1][:, 1]
    elif min_ev == max_ev:
        expectedx = data[1][0]
        uncertainty = data[1][1]

    if min_ev < max_ev:
        ydiff = abs(np.amax(energy) - np.amin(energy))
    elif min_ev == max_ev:
        ydiff = abs(energy - np.amin(pot))

    if min_ev < max_ev:
        pot_plot_multi(xmin, xmax, min_ev, max_ev, energy, evec, pot, xplot,
                       ydiff, expectedx, uncertainty, scale)
    else:
        pot_plot_one(xmin, xmax, energy, evec, pot, xplot, ydiff, expectedx,
                     uncertainty, scale)


if __name__ == '__main__':
    main()
