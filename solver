#!/usr/bin/env python3
"""Main environment to solve the one dimensional time independent schrodinger
equation for different potentials. It writes the energies into energies.dat,
the wavefunctions into wavefuncs.dat, the potential into potential.dat and
the expected values of the position into expvalues.dat."""

import argparse
import numpy as np
import calculus


_DESCRIPTION = """
Solves the schrodinger equation for various problems."""


def _clparsing():
    """Takes inputs from the command line and passes them to the program

    Returns:
        dic: Dictionary including the user input from the command line
    """
    parser = argparse.ArgumentParser(description=_DESCRIPTION)

    msg = 'Path of the input file'
    parser.add_argument('-id', '--indir', default='.', help=msg)

    msg = 'Path of the output file'
    parser.add_argument('-od', '--outdir', default='.', help=msg)

    args = parser.parse_args()

    return args


_DIRECTORY = 'files'

_FILE = 'schrodinger.inp'


def main():
    """Main function to solve the one dimensional time independent schrodinger
    equation.
    """
    args = _clparsing()
    indirectory = args.indir
    outdirectory = args.outdir
    # Read out the informations of the schrodinger.inp file.
    inp = calculus.io.read_schrodinger(indirectory, _FILE)

    xplot = np.linspace(inp['_XMIN'], inp['_XMAX'], num=inp['_NPOINT'],
                        endpoint=True)

    pot = calculus.calc.pot_calc(xplot, inp['_POT'], inp['_REG_TYPE'])

    energy, evec = calculus.calc.solve_seq(inp['_XMIN'], inp['_XMAX'],
                                           inp['_NPOINT'], inp['_MASS'], pot)

    energy = energy[inp['_MIN_EV'] - 1: inp['_MAX_EV']]

    xevec = calculus.calc.get_wf_array(xplot, inp['_MIN_EV'],
                                       inp['_MAX_EV'], evec)

    expectedx = calculus.calc.expected_values(xplot, evec, inp['_MIN_EV'],
                                              inp['_MAX_EV'])

    uncertainty = calculus.calc.uncertainty(xplot, evec, inp['_MIN_EV'],
                                            inp['_MAX_EV'])

    exp_values = calculus.calc.get_exp_unc(expectedx, uncertainty)

    x_pot = np.transpose(np.vstack((xplot, pot)))

    calculus.file_io.create_files(outdirectory, energy, exp_values, x_pot, xevec)


if __name__ == '__main__':
    main()
